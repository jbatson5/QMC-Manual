.. _analyzing:

Analyzing QMCPACK data
======================

.. _qmca:

Using the qmca tool to obtain total energies and related quantities
-------------------------------------------------------------------

The ``qmca`` tool is the primary means of analyzing scalar-valued data
generated by QMCPACK. Output files that contain scalar-valued data are
``*.scalar.dat`` and ``*.dmc.dat`` (see :ref:`output-overview` for a detailed description of these files).
Quantities that are available for analysis in ``*.scalar.dat`` files
include the local energy and its variance, kinetic energy, potential
energy and its components, acceptance ratio, and the average CPU time
spent per block, among others. The ``*.dmc.dat`` files provide
information regarding the DMC walker population in addition to the local
energy.

Basic capabilities of ``qmca`` include calculating mean values and
associated error bars, processing multiple files at once in batched
fashion, performing twist averaging, plotting mean values by series, and
plotting traces (per block or step) of the underlying data. These
capabilities are explained with accompanying examples in the following
subsections.

To use ``qmca``, installations of Python and NumPy must be present on
the local machine. For graphical plotting, the matplotlib module must
also be available.

An overview of all supported input flags to ``qmca`` can be obtained by
typing ``qmca`` at the command line with no other inputs (also try
``qmca -x`` for a short list of examples):

::

  >qmca
    no files provided, please see help info below

    Usage: qmca [options] [file(s)]

    Options:
      --version             show program's version number and exit
      -v, --verbose         Print detailed information (default=False).
      -q QUANTITIES, --quantities=QUANTITIES
                            Quantity or list of quantities to analyze.  See names
                            and abbreviations below (default=all).
      -u UNITS, --units=UNITS
                            Desired energy units.  Can be Ha (Hartree), Ry
                            (Rydberg), eV (electron volts), kJ_mol (k.
                            joule/mole), K (Kelvin), J (Joules) (default=Ha).
      -e EQUILIBRATION, --equilibration=EQUILIBRATION
                            Equilibration length in blocks (default=auto).
      -a, --average         Average over files in each series (default=False).
      -w WEIGHTS, --weights=WEIGHTS
                            List of weights for averaging (default=None).
      -b, --reblock         (pending) Use reblocking to calculate statistics
                            (default=False).
      -p, --plot            Plot quantities vs. series (default=False).
      -t, --trace           Plot a trace of quantities (default=False).
      -h, --histogram       (pending) Plot a histogram of quantities
                            (default=False).
      -o, --overlay         Overlay plots (default=False).
      --legend=LEGEND       Placement of legend.  None for no legend, outside for
                            outside legend (default=upper right).
      --noautocorr          Do not calculate autocorrelation. Warning: error bars
                            are no longer valid! (default=False).
      --noac                Alias for --noautocorr (default=False).
      --sac                 Show autocorrelation of sample data (default=False).
      --sv                  Show variance of sample data (default=False).
      -i, --image           (pending) Save image files (default=False).
      -r, --report          (pending) Write a report (default=False).
      -s, --show_options    Print user provided options (default=False).
      -x, --examples        Print examples and exit (default=False).
      --help                Print help information and exit (default=False).
      -d DESIRED_ERROR, --desired_error=DESIRED_ERROR
                            Show number of samples needed for desired error bar
                            (default=none).
      -n PARTICLE_NUMBER, --enlarge_system=PARTICLE_NUMBER
                            Show number of samples needed to maintain error bar on
                            larger system: desired particle number first, current
                            particle number second (default=none)

.. _qmca-mean-error:

Obtaining a statistically correct mean and error bar
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A rough guess at the mean and error bar of the local energy can be
obtained in the following way with ``qmca``:

::

  >qmca -q e qmc.s000.scalar.dat
  qmc  series 0  LocalEnergy           =  -45.876150 +/- 0.017688

In this case the VMC energy of an 8-atom cell of diamond is estimated to
be :math:`-45.876(2)` Hartrees (Ha). This rough guess should not be used
for production-level or publication-quality estimates.

To obtain production-level results, the underlying data should first be
inspected visually to ensure that all data included in the averaging can
be attributed to a distribution sharing the same mean. The first steps
of essentially any MC calculation (the “equilibration phase”) do not
belong to the equilibrium distribution and should be excluded from
estimates of the mean and its error bar.

We can plot a data trace (``-t``) of the local energy in the
following way:

::

  >qmca -t -q e -e 0 qmc.s000.scalar.dat

The ``-e 0`` part indicates that we do not want any data
to be initially excluded from the calculation of averages.  The resulting
plot is shown in :numref:`fig4`.  The unphysical
equilibration period is visible on the left side of the plot.

.. _fig4:
.. figure:: /figs/qmca_mean_error_trace.png
  :width: 400
  :align: center

  Trace of the VMC local energy for an 8-atom cell of diamond generated
  with ``qmca``. The x-axis (“samples”) refers to the VMC block index in
  this case.

Most of the data fluctuates around a well-defined mean (consistent
variations around a flat line).  This property is important to verify
by plotting the trace for each QMC run.

If we exclude none of the equilibration data points, we get an
erroneous estimate of $-45.870(2)$~Ha for the local energy:

::

  >qmca -q e -e 0 qmc.s000.scalar.dat
  qmc  series 0  LocalEnergy           =  -45.870071 +/- 0.018072

The equilibration period is typically estimated by eye, though a few conservative values should be checked to ensure that the mean remains
unaffected.  In this dataset, the equilibration appears to have been
reached after 100 or so samples.  After excluding the first 100
VMC blocks from the analysis we get

::

  >qmca -q e -e 100 qmc.s000.scalar.dat
  qmc  series 0  LocalEnergy           =  -45.877363 +/- 0.017432

This estimate (:math:`-45.877(2)` Ha) differs significantly from the
:math:`-45.870(2)` Ha figure obtained from the full set of data, but it
agrees with the rough estimate of :math:`-45.876(2)` Ha obtained with
the abbreviated command (``qmca -q e qmc.s000.scalar.dat``). This is
because ``qmca`` makes a heuristic guess at the equilibration period and
got it reasonably correct in this case. In many cases, the heuristic
guess fails and should not be relied on for quality results.

We have so far obtained a statistically correct mean. To obtain a
statistically correct error bar, it is best to include :math:`\sim`\ 100
or more statistically independent samples. An estimate of the number of
independent samples can be obtained by considering the autocorrelation
time, which is essentially a measure of the number of samples that must
be traversed before an uncorrelated/independent sample is reached. We
can get an estimate of the autocorrelation time in the following way:

::

  >qmca -q e -e 100 qmc.s000.scalar.dat --sac
  qmc  series 0  LocalEnergy           =  -45.877363 +/- 0.017432    4.8

The flag ``–sac`` stands for (s)how (a)uto(c)orrelation. In this case,
the autocorrelation estimate is :math:`4.8\approx 5` samples. Since the
total run contained 800 samples and we have excluded 100 of them, we can
estimate the number of independent samples as :math:`(800-100)/5=140`.
In this case, the error bar is expected to be estimated reasonably well.

.. _fig5:
.. figure:: /figs/qmca_judge_opt.png
  :width: 400
  :align: center

  Trace of the local energy during one- and two-body Jastrow optimizations
  for an 8-atom cell of diamond generated with ``qmca``. Data for each
  optimization cycle (QMCPACK series) is separated by a vertical black
  line.

Keep in mind that the error bar represents the expected range of the
mean with a certainty of only :math:`\sim 70\%`; i.e., it is a one sigma
error bar. The actual mean value will lie outside the range indicated by
the error bar in 1 out of every 3 runs, and in a set of 20 runs 1 value
can be expected to deviate from its estimate by twice the error bar.

.. qmca-judge-opt:

Judging wavefunction optimization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Wavefunction optimization is a highly nonlinear and sometimes
sensitive process.  As such, there is a risk that systematic
errors encountered at this stage of the QMC process can be propagated
into subsequent (expensive) DMC runs unless they are guarded against
with vigilance.

In this section we again consider an 8-atom cell of diamond but now in
the context of Jastrow optimization (one- and two-body terms). In
optimization runs it is often preferable to use a large number of
``warmupsteps`` (:math:`\sim 100`) so that equilibration bias does not
propagate into the optimization process. We can check that the added
warm-up has had its intended effect by again checking the local energy
trace:

::

  >qmca -t -q e *scalar*

The resulting plot can be found in :numref:`fig5`. In
this case sufficient ``warmupsteps`` were used to exit the equilibration
period before samples were collected and we can proceed without using
the ``-e`` option with ``qmca``.

After inspecting the trace, we should inspect the text output from
``qmca``, now including the total energy and its variance:

::

  >qmca -q ev opt*scalar.dat
                              LocalEnergy               Variance           ratio
  opt  series 0  -44.823616 +/- 0.007430   7.054219 +/- 0.041998   0.1574
  opt  series 1  -45.877643 +/- 0.003329   1.095362 +/- 0.041154   0.0239
  opt  series 2  -45.883191 +/- 0.004149   1.077942 +/- 0.021555   0.0235
  opt  series 3  -45.877524 +/- 0.003094   1.074047 +/- 0.010491   0.0234
  opt  series 4  -45.886062 +/- 0.003750   1.061707 +/- 0.014459   0.0231
  opt  series 5  -45.877668 +/- 0.003475   1.091585 +/- 0.021637   0.0238
  opt  series 6  -45.877109 +/- 0.003586   1.069205 +/- 0.009387   0.0233
  opt  series 7  -45.882563 +/- 0.004324   1.058771 +/- 0.008651   0.0231


The flags ``-q ev`` requested the energy (``e``) and the variance
(``v``). For this combination of quantities, a third column (``ratio``)
is printed containing the ratio of the variance and the absolute value
of the local energy. The variance/energy ratio is an intensive quantity
and is useful to inspect regardless of the system under study.
Successful optimization of molecules and solids of any size generally
result in comparable values for the variance/energy ratio.

The first line of the output (``series 0``) corresponds to the local
energy and variance of the system without a Jastrow factor (all Jastrow
coefficients were initialized to zero in this case), reflecting the
quality of the orbitals alone. For pseudopotential systems, a
variance/energy ratio :math:`>0.20` Ha generally indicates there is a
problem with the input orbitals that needs to be resolved before
performing wavefunction optimization.

The subsequent lines correspond to energies and variances of
intermediate parameterizations of the trial wavefunction during the
optimization process. The output line containing ``opt series 1``, for
example, corresponds to the trial wavefunction parameterized during the
``series 0`` step (the parameters of this wavefunction would be found in
an output file matching ``*s000*opt.xml``). The first thing to check
about the resulting optimization is again the variance/energy ratio. For
pseudopotential systems, a variance/energy ratio :math:`<0.03` Ha is
consistent with a trial wavefunction of production quality, and values
of :math:`0.01` Ha are rarely obtainable for standard Slater-Jastrow
wavefunctions. By this metric, all parameterizations obtained for
optimizations performed in series 0-6 are of comparable quality (note
that the quality of the wavefunction obtained during optimization series
7 is effectively unknown).


A good way to further discriminate among the parameterizations is to
plot the energy and variance as a function of series with ``qmca``:

::

  >qmca -p -q ev opt*scalar.dat


The ``-p`` option results in plots of means plus error bars
vs. series for all requested quantities.
The resulting plots for the local energy and variance are shown
in :numref:`fig6`.  In this case, the resulting energies
and variances are statistically indistinguishable for all optimization
cycles.

A good way to choose the optimal wavefunction for use in DMC is to
select the one with the lowest statistically significant energy within
the set of optimized wavefunctions with reasonable variance (e.g., among
those with a variance/energy ratio :math:`<0.03` Ha). For
pseudopotential calculations, minimizing according to the total energy
is recommended to reduce locality errors in DMC.

.. image:: /figs/qmca_opt_energy.png
  :width: 400
  :align: center

.. _fig6:
.. figure:: /figs/qmca_opt_variance.png
  :width: 400
  :align: center

  Energy and variance vs. optimization series for an 8-atom cell of
  diamond as plotted by ``qmca``.

.. _qmca-judge-dmc:

Judging diffusion Monte Carlo runs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Judging the quality of the DMC projection process requires more
care than is needed in VMC. To reduce bias, a small
time step is required in the approximate projector but this also
leads to slow equilibration and long autocorrelation times.
Systematic errors in the projection process can also arise from
statistical fluctuations due to pseudopotentials or from trial
wavefunctions with larger-than-necessary variance.


To illustrate the problems that can arise with respect to slow
equilibration and long autocorrelation times, we consider the 8-atom
diamond system with VMC (:math:`200` blocks of :math:`160` steps)
followed by DMC (:math:`400` blocks of :math:`5` steps) with a small
time step (:math:`0.002` Ha\ :math:`^{-1}`). A good first step in
assessing the quality of any DMC run is to plot the trace of the local
energy:

::

  >qmca -t -q e -e 0 *scalar*

.. _fig7:
.. figure:: /figs/qmca_short_dmc.png
  :width: 400
  :align: center

  Trace of the local energy for VMC followed by DMC with a small time step
  (:math:`0.002` Ha\ :math:`^{-1}`) for an 8-atom cell of diamond
  generated with ``qmca``.


The resulting trace plot is shown in :numref:`fig7`. As
always, the DMC local energy decreases exponentially away from the VMC
value, but in this case it takes a long time to do so. At least half of
the DMC run is inefficiently consumed by equilibration. If we are not
careful to inspect and remove the transient, the estimated DMC energy
will be strongly biased by the transient as shown by the horizontal red
line (estimated mean) in the figure. The autocorrelation time is also
large (:math:`\sim 12` blocks):

::


  >qmca -q e -e 200 --sac *s001.scalar*
  qmc  series 1  LocalEnergy           =  -46.045720 +/- 0.004813   11.6

Of the included 200 blocks, fewer than 20 contribute to the estimated error
bar, indicating that we cannot trust the reported error bar.
This can also be demonstrated directly from the data.  If we halve the number
of included samples to 100, we expect from Gaussian statistics
that the error bar will grow by a factor of $\sqrt{2}$, but instead we
get

::

  >qmca -q e -e 300 *s001.scalar*
  qmc  series 1  LocalEnergy           =  -46.048537 +/- 0.009280

which erroneously shows an estimated increase in the error bar by a
factor of about 2. Overall, this run is simply too short to gain
meaningful information.

Consider the case in which we are interested in the cohesive energy of
diamond, and, after having performed a time step study of the cohesive
energy, we have found that the energy difference between bulk diamond
and atomic carbon converges to our required accuracy with a larger time
step of :math:`0.01` Ha\ :math:`^{-1}`. In a production setting, a small
cell could be used to determine the appropriate time step, while a
larger cell would subsequently be used to obtain a converged cohesive
energy, though for purposes of demonstration we still proceed here with
the 8-atom cell. The new time step of :math:`0.01` Ha\ :math:`^{-1}`
will result in a shorter autocorrelation time than the smaller time step
used previously, but we would like to shorten the equilibration time
further still. This can be achieved by using a larger time step (say
:math:`0.02` Ha\ :math:`^{-1}`) in a short intermediate DMC run used to
walk down the transient. The rapidly achieved equilibrium with the
:math:`0.02` Ha\ :math:`^{-1}` time step projector will be much nearer
to the :math:`0.01` Ha\ :math:`^{-1}` time step we seek than the
original VMC equilibrium, so we can expect a shortened secondary
equilibration time in the production :math:`0.01` Ha\ :math:`^{-1}` time
step run. Note that this procedure is fully general, even if having to
deal with an even shorter time step (e.g., :math:`0.002`
Ha\ :math:`^{-1}`) for a particular problem.

We now rerun the previous example but with an intermediate DMC
calculation using :math:`40` blocks of :math:`5` steps with a time step
of :math:`0.02` Ha\ :math:`^{-1}`, followed by a production DMC
calculation using :math:`400` blocks of :math:`10` steps with a time
step of :math:`0.01` Ha\ :math:`^{-1}`. We again plot the local energy
trace using ``qmca``:

::

  >qmca -t -q e -e 0 *scalar*

with the result shown in :numref:`fig8`.
The projection transient has been effectively contained in the
short DMC run with a larger time step.  As expected, the
production run contains only a short equilibration period.
Removing the first 20 blocks as a precaution, we obtain an estimate
of the total energy in VMC and DMC:

::

  >qmca -q ev -e 20 --sac qmc.*.scalar.dat
                              LocalEnergy               Variance           ratio
  qmc  series 0  -45.881042 +/- 0.001283    1.0   1.076726 +/- 0.007013    1.0   0.0235
  qmc  series 1  -46.040814 +/- 0.005046    3.9   1.011303 +/- 0.016807    1.1   0.0220
  qmc  series 2  -46.032960 +/- 0.002077    5.2   1.014940 +/- 0.002547    1.0   0.0220

.. _fig8:
.. figure:: /figs/qmca_accel_dmc.png
  :width: 400
  :align: center

  Trace of the local energy for VMC followed by a short intermediate DMC
  with a large time step (:math:`0.02` Ha\ :math:`^{-1}`) and finally a
  production DMC run with a time step of :math:`0.01` Ha\ :math:`^{-1}`.
  Calculations were performed in an 8-atom cell of diamond.

Notice that the variance/energy ratio in DMC (:math:`0.220` Ha) is
similar to but slightly smaller than that obtained with VMC
(:math:`0.235` Ha). If the DMC variance/energy ratio is ever
significantly larger than with VMC, this is cause to be concerned about
the correctness of the DMC run. Also notice the estimated
autocorrelation time (:math:`\sim 5` blocks). This leaves us with an
estimated :math:`\sim 76` independent samples, though we should recall
that the autocorrelation time is also a statistical estimate that can be
improved with more data. We can gain a better estimate of the
autocorrelation time by using the ``*.dmc.dat`` files, which contain
output data resolved per step rather than per block (there are
:math:`10\times` more steps than blocks in this example case):

::

  >qmca -q ev -e 200 --sac qmc.s002.dmc.dat
                              LocalEnergy               Variance           ratio
  qmc  series 2  -46.032909 +/- 0.002068   31.2   1.015781 +/- 0.002536    1.4   0.0221

This results in an estimated autocorrelation time of :math:`\sim 31`
steps, or :math:`\sim 3` blocks, indicating that we actually have
:math:`\sim 122` independent samples, which should be sufficient to
obtain a trustworthy error bar. Our final DMC total energy is estimated
to be :math:`-46.0329(2)` Ha.

Another simulation property that should be explicitly monitored
is the behavior of the DMC walker population.  Data regarding the
walker population is contained in the ``*.dmc.dat`` files.
In :numref:`fig9` we show the trace of the DMC
walker population for the current run:

::

  >qmca -t -q nw *dmc.dat
  qmc  series 1  NumOfWalkers          =  2056.905405 +/- 8.775527
  qmc  series 2  NumOfWalkers          =  2050.164160 +/- 4.954850

Following a DMC run, the walker population should be checked for two
qualities: (1) that the population is sufficiently large (a number
:math:`>2,000` is generally sufficient to reduce population control
bias) and (2) that the population fluctuates benignly around its
intended target value. In this case the target walker count (provided in
the input file) was :math:`2,048` and we can confirm from the plot that
the population is simply fluctuating around this value. Also, from the
text output we have a dynamic population estimate of 2,050(5) walkers.
Rapid population reductions or increases—population explosions—are
indicative of problems with a run. These issues sometimes result from
using a considerably poor wavefunction (see comments regarding
variance/energy ratio in the preceding subsections). QMCPACK has
internal guards in place that prevent the population from exceeding
certain maximum and minimum bounds, so in particularly faulty runs one
might see the population “stabilize” to a constant value much larger or
smaller than the target. In such cases the cause(s) for the divergent
population behavior needs to be investigated and resolved before
proceeding further.

.. _fig9:
.. figure:: /figs/qmca_pop_trace.png
  :width: 400
  :align: center

  Trace of the DMC walker population for an 8-atom cell of diamond
  obtained with ``qmca``.

.. _qmca-other-quantities:

Obtaining other quantities
~~~~~~~~~~~~~~~~~~~~~~~~~~

A number of other scalar-valued quantities are available with ``qmca``.
To obtain text output for all quantities available, simply exclude the
``-q`` option used in previous examples. The following example shows
output for a DMC calculation of the 8-atom diamond system from the
``scalar.dat`` file:

::

  >qmca -e 20 qmc.s002.scalar.dat
  qmc  series 2
    LocalEnergy           =          -46.0330 +/-           0.0021
    Variance              =            1.0149 +/-           0.0025
    Kinetic               =            33.851 +/-            0.019
    LocalPotential        =           -79.884 +/-            0.020
    ElecElec              =          -11.4483 +/-           0.0083
    LocalECP              =           -22.615 +/-            0.029
    NonLocalECP           =            5.2815 +/-           0.0079
    IonIon                =            -51.10 +/-             0.00
    LocalEnergy_sq        =           2120.05 +/-             0.19
    BlockWeight           =          20514.27 +/-            48.38
    BlockCPU              =            1.4890 +/-           0.0038
    AcceptRatio           =         0.9963954 +/-        0.0000055
    Efficiency            =             71.88 +/-             0.00
    TotalTime             =            565.80 +/-             0.00
    TotalSamples          =           7795421 +/-                0

Similarly, for the ``dmc.dat`` file we get

::

  >qmca -e 20 qmc.s002.dmc.dat
  qmc  series 2
    LocalEnergy           =          -46.0329 +/-           0.0020
    Variance              =            1.0162 +/-           0.0025
    TotalSamples          =           8201275 +/-                0
    TrialEnergy           =          -46.0343 +/-           0.0023
    DiffEff               =         0.9939150 +/-        0.0000088
    Weight                =           2050.23 +/-             4.82
    NumOfWalkers          =              2050 +/-                5
    LivingFraction        =          0.996427 +/-         0.000021
    AvgSentWalkers        =            0.2625 +/-           0.0011

Any subset of desired quantities can be obtained by using the ``-q``
option with either the full names of the quantities just listed

::

  >qmca -q 'LocalEnergy Kinetic LocalPotential' -e 20 qmc.s002.scalar.dat
  qmc  series 2
    LocalEnergy           =          -46.0330 +/-           0.0021
    Kinetic               =            33.851 +/-            0.019
    LocalPotential        =           -79.884 +/-            0.020

or with their corresponding abbreviations.

::

  >qmca -q ekp -e 20 qmc.s002.scalar.dat
  qmc  series 2
    LocalEnergy           =          -46.0330 +/-           0.0021
    Kinetic               =            33.851 +/-            0.019
    LocalPotential        =           -79.884 +/-            0.020

Abbreviations for each quantity can be found by typing ``qmca`` at the
command line with no other input. This following is a current list:

::

  Abbreviations and full names for quantities:
      ar              = AcceptRatio
      bc              = BlockCPU
      bw              = BlockWeight
      ce              = CorrectedEnergy
      de              = DiffEff
      e               = LocalEnergy
      ee              = ElecElec
      eff             = Efficiency
      ii              = IonIon
      k               = Kinetic
      kc              = KEcorr
      l               = LocalECP
      le2             = LocalEnergy_sq
      mpc             = MPC
      n               = NonLocalECP
      nw              = NumOfWalkers
      p               = LocalPotential
      sw              = AvgSentWalkers
      te              = TrialEnergy
      ts              = TotalSamples
      tt              = TotalTime
      v               = Variance
      w               = Weight

See the output overview for ``scalar.dat``
(:ref:`scalardat-file`) and ``dmc.dat``
(:ref:`dmc-file`) for more information about
these quantities.  The data analysis aspects for these
quantities are essentially the same as for the local
energy as covered in the preceding subsections.
Quantities that do not belong to an equilibrium distribution
(e.g., ``BlockCPU``) are somewhat different, though they
still exhibit statistical fluctuations.

.. _qmca-multiple-files:

Processing multiple files
~~~~~~~~~~~~~~~~~~~~~~~~~

Batch file processing is a common use case for ``qmca``. If we consider
an “equation-of-state” calculation involving the 8-atom diamond cell we
have used so far, we might be interested in the total energy for the
various supercell volumes along the trajectory from compression to
expansion. After checking the traces
(``qmca -t -q e scale_/vmc/*scalar*``) to settle on a sensible
equilibration cutoff as discussed in the preceding subsections, we can
obtain the total energies all at once:

::

  >qmca -q ev -e 40 scale_*/vmc/*scalar*
                              LocalEnergy               Variance           ratio
  scale_0.80/vmc/qmc  series 0 -44.670984 +/- 0.006051  2.542384 +/- 0.019902  0.0569
  scale_0.82/vmc/qmc  series 0 -44.982818 +/- 0.005757  2.413011 +/- 0.022626  0.0536
  scale_0.84/vmc/qmc  series 0 -45.228257 +/- 0.005374  2.258577 +/- 0.019322  0.0499
  scale_0.86/vmc/qmc  series 0 -45.415842 +/- 0.005532  2.204980 +/- 0.052978  0.0486
  scale_0.88/vmc/qmc  series 0 -45.570215 +/- 0.004651  2.061374 +/- 0.014359  0.0452
  scale_0.90/vmc/qmc  series 0 -45.683684 +/- 0.005009  1.988539 +/- 0.018267  0.0435
  scale_0.92/vmc/qmc  series 0 -45.751359 +/- 0.004928  1.913282 +/- 0.013998  0.0418
  scale_0.94/vmc/qmc  series 0 -45.791622 +/- 0.005026  1.843704 +/- 0.014460  0.0403
  scale_0.96/vmc/qmc  series 0 -45.809256 +/- 0.005053  1.829103 +/- 0.014536  0.0399
  scale_0.98/vmc/qmc  series 0 -45.806235 +/- 0.004963  1.775391 +/- 0.015199  0.0388
  scale_1.00/vmc/qmc  series 0 -45.783481 +/- 0.005293  1.726869 +/- 0.012001  0.0377
  scale_1.02/vmc/qmc  series 0 -45.741655 +/- 0.005627  1.681776 +/- 0.011496  0.0368
  scale_1.04/vmc/qmc  series 0 -45.685101 +/- 0.005353  1.682608 +/- 0.015423  0.0368
  scale_1.06/vmc/qmc  series 0 -45.615164 +/- 0.005978  1.652155 +/- 0.010945  0.0362
  scale_1.08/vmc/qmc  series 0 -45.543037 +/- 0.005191  1.646375 +/- 0.013446  0.0361
  scale_1.10/vmc/qmc  series 0 -45.450976 +/- 0.004794  1.707649 +/- 0.048186  0.0376
  scale_1.12/vmc/qmc  series 0 -45.371851 +/- 0.005103  1.686997 +/- 0.035920  0.0372
  scale_1.14/vmc/qmc  series 0 -45.265490 +/- 0.005311  1.631614 +/- 0.012381  0.0360
  scale_1.16/vmc/qmc  series 0 -45.161961 +/- 0.004868  1.656586 +/- 0.014788  0.0367
  scale_1.18/vmc/qmc  series 0 -45.062579 +/- 0.005971  1.671998 +/- 0.019942  0.0371
  scale_1.20/vmc/qmc  series 0 -44.960477 +/- 0.004888  1.651864 +/- 0.009756  0.0367

In this case, we are using a Jastrow factor optimized only at the
equilibrium geometry (``scale_1.00``) but with radial cutoffs restricted
to the Wigner-Seitz radius of the most compressed supercell
(``scale_0.80``) to avoid introducing wavefunction cusps at the cell
boundary (had we tried, QMCPACK would have aborted with a warning in
this case). It is clear that this restricted Jastrow factor is not an
optimal choice because it yields variance/energy ratios between
:math:`0.036` and :math:`0.057` Ha. This issue is largely a result of
our undersized (8-atom) supercell; larger cells should always be used in
real production calculations.

Batch processing is also possible for multiple quantities.  If multiple
quantities are requested, an additional line is inserted to separate
results from different runs:

::

  >qmca -q 'e bc eff' -e 40 scale_*/vmc/*scalar*
  scale_0.80/vmc/qmc  series 0
    LocalEnergy           =          -44.6710 +/-           0.0061
    BlockCPU              =           0.02986 +/-          0.00038
    Efficiency            =          38104.00 +/-             0.00

  scale_0.82/vmc/qmc  series 0
    LocalEnergy           =          -44.9828 +/-           0.0058
    BlockCPU              =           0.02826 +/-          0.00013
    Efficiency            =          44483.91 +/-             0.00

  scale_0.84/vmc/qmc  series 0
    LocalEnergy           =          -45.2283 +/-           0.0054
    BlockCPU              =           0.02747 +/-          0.00030
    Efficiency            =          52525.12 +/-             0.00

  scale_0.86/vmc/qmc  series 0
    LocalEnergy           =          -45.4158 +/-           0.0055
    BlockCPU              =           0.02679 +/-          0.00013
    Efficiency            =          50811.55 +/-             0.00

  scale_0.88/vmc/qmc  series 0
    LocalEnergy           =          -45.5702 +/-           0.0047
    BlockCPU              =           0.02598 +/-          0.00015
    Efficiency            =          74148.79 +/-             0.00

  scale_0.90/vmc/qmc  series 0
    LocalEnergy           =          -45.6837 +/-           0.0050
    BlockCPU              =           0.02527 +/-          0.00011
    Efficiency            =          65714.98 +/-             0.00

  ...

.. _qmca-twist-average:

Twist averaging
~~~~~~~~~~~~~~~

Twist averaging can be performed straightforwardly for any output
quantity listed in :ref:`qmca-other-quantities` with ``qmca``.
We illustrate these capabilities by repeating the 8-atom diamond DMC
runs performed in Section :ref:`qmca-judge-dmc` at 8 real-valued
supercell twist angles (a :math:`2\times 2\times 2` Monkhorst-Pack grid
centered at the :math:`\Gamma`-point). Data traces for each twist can be
overlapped on the same plot:

::

  >qmca -to -q e -e '30 20 30' *scalar* --legend outside

The ``-o`` option requests the plots to be overlapped; otherwise,
8 separate plots would be generated.  The
equilibration input ``-e '30 20 30'`` cuts out from
the analyzed data the first 30 blocks for series 0 (VMC),
20 blocks for series 1 (intermediate DMC), and 30 blocks for
series 2 (production DMC).  The resulting plot is shown in
:numref:`fig10`.

.. _fig10:
.. figure:: /figs/qmca_twist_trace_overlap.png
  :width: 400
  :align: center

  Overlapped energy traces from VMC to DMC for an 8-supercell diamond
  obtained with ``qmca``. Data for each twist appears in a different
  color.

Twist averaging is performed by providing the ``-a``
option.  If provided on its own, uniform weights are applied
to each twist angle.  To obtain a trace plot with twist averaging
enforced, use a command similar to the following:

::

  >qmca -a -t -q e -e '30 20 30' *scalar*

The resulting plot is shown in :numref:`fig11`. As
can be seen from the trace plot, the chosen equilibration lengths are
appropriate, and we proceed to obtain the twist-averaged total energy
from the ``scalar.dat`` files

::

  >qmca -a -q ev -e 30 --sac *s002.scalar*
                              LocalEnergy               Variance           ratio
  avg  series 2  -45.873369 +/- 0.000753    5.3   1.028751 +/- 0.001056    1.3   0.0224

and also from the ``dmc.dat`` files

::

  >qmca -a -q ev -e 300 --sac *s002.dmc*
                            LocalEnergy               Variance           ratio
  avg  series 2  -45.873371 +/- 0.000741   30.5   1.028843 +/- 0.000972    1.6   0.0224

yielding a twist-averaged total energy of :math:`-45.8733(8)` Ha.

.. _fig11:
.. figure:: /figs/qmca_twist_average_trace.png
  :width: 400
  :align: center

  Twist-averaged energy trace from VMC to DMC for an 8-supercell diamond obtained with ``qmca``.
